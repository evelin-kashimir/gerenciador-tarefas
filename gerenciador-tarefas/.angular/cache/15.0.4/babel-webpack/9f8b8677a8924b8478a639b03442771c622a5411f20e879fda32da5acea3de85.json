{"ast":null,"code":"import * as i0 from \"@angular/core\";\n/** Serviço responsável pela regra de negócio do gerenciamento de tarefas\r\n *  Listagem, Cadastro, Atualização e Remoção.\r\n *\r\n * @author Evelin Ferraz\r\n * @since 20/12/2022\r\n */\nexport class TarefaService {\n  constructor() {}\n  /** Lista todas as tarefas cadastradas\r\n   * @return Tarefa\r\n   */\n  listarTodos() {\n    const tarefas = localStorage['tarefas'];\n    return tarefas ? JSON.parse(tarefas) : [];\n  }\n  /** Cadastra uma nova tarefa\r\n   * @param Tarefa\r\n   */\n  cadastrar(tarefa) {\n    const tarefas = this.listarTodos();\n    tarefa.id = new Date().getTime();\n    tarefas.push(tarefa);\n    localStorage['tarefas'] = JSON.stringify(tarefas);\n  }\n  /** Faz uma busca de tarefa por id\r\n   * @return Tarefa\r\n   */\n  buscarPorId(id) {\n    const tarefas = this.listarTodos();\n    return tarefas.find(tarefa => tarefa.id === id);\n  }\n  /** Atualiza uma determinada tarefa\r\n   * @param Tarefa\r\n   */\n  atualizar(tarefa) {\n    const tarefas = this.listarTodos();\n    tarefas.forEach((obj, index, objs) => {\n      if (tarefa.id === obj.id) {\n        objs[index] = tarefa;\n      }\n    });\n    localStorage['tarefas'] = JSON.stringify(tarefas);\n  }\n  /** Remove uma tarefa através do id\r\n   * @param id\r\n   */\n  remover(id) {\n    let tarefas = this.listarTodos();\n    tarefas = tarefas.filter(tarefa => tarefa.id !== id);\n    localStorage['tarefas'] = JSON.stringify(tarefas);\n  }\n  /** Altera o status de determinada tarefa para concluido ou não\r\n   * @param id\r\n   */\n  alterarStatus(id) {\n    const tarefas = this.listarTodos();\n    tarefas.forEach((obj, index, objs) => {\n      objs[index].concluida = !obj.concluida;\n    });\n  }\n}\nTarefaService.ɵfac = function TarefaService_Factory(t) {\n  return new (t || TarefaService)();\n};\nTarefaService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TarefaService,\n  factory: TarefaService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAGA;;;;;;AASA,OAAM,MAAOA,aAAa;EAExBC,eAAgB;EAEhB;;;EAGAC,WAAW;IACT,MAAMC,OAAO,GAAGC,YAAY,CAAC,SAAS,CAAC;IACvC,OAAOD,OAAO,GAAGE,IAAI,CAACC,KAAK,CAACH,OAAO,CAAC,GAAG,EAAE;EAC3C;EAEA;;;EAGAI,SAAS,CAACC,MAAc;IACtB,MAAML,OAAO,GAAG,IAAI,CAACD,WAAW,EAAE;IAClCM,MAAM,CAACC,EAAE,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE;IAChCR,OAAO,CAACS,IAAI,CAACJ,MAAM,CAAC;IACpBJ,YAAY,CAAC,SAAS,CAAC,GAAGC,IAAI,CAACQ,SAAS,CAACV,OAAO,CAAC;EACnD;EAEA;;;EAGAW,WAAW,CAACL,EAAU;IACpB,MAAMN,OAAO,GAAa,IAAI,CAACD,WAAW,EAAE;IAC5C,OAAOC,OAAO,CAACY,IAAI,CAACP,MAAM,IAAIA,MAAM,CAACC,EAAE,KAAKA,EAAE,CAAC;EACjD;EAEA;;;EAGAO,SAAS,CAACR,MAAc;IACtB,MAAML,OAAO,GAAa,IAAI,CAACD,WAAW,EAAE;IAC5CC,OAAO,CAACc,OAAO,CAAC,CAACC,GAAG,EAAEC,KAAK,EAAEC,IAAI,KAAI;MACnC,IAAIZ,MAAM,CAACC,EAAE,KAAKS,GAAG,CAACT,EAAE,EAAE;QACxBW,IAAI,CAACD,KAAK,CAAC,GAAGX,MAAM;;IAExB,CAAC,CAAC;IACFJ,YAAY,CAAC,SAAS,CAAC,GAAGC,IAAI,CAACQ,SAAS,CAACV,OAAO,CAAC;EACnD;EAEA;;;EAGAkB,OAAO,CAACZ,EAAU;IAChB,IAAIN,OAAO,GAAa,IAAI,CAACD,WAAW,EAAE;IAC1CC,OAAO,GAAGA,OAAO,CAACmB,MAAM,CAACd,MAAM,IAAIA,MAAM,CAACC,EAAE,KAAKA,EAAE,CAAC;IACpDL,YAAY,CAAC,SAAS,CAAC,GAAGC,IAAI,CAACQ,SAAS,CAACV,OAAO,CAAC;EACnD;EAEA;;;EAGAoB,aAAa,CAACd,EAAU;IACtB,MAAMN,OAAO,GAAa,IAAI,CAACD,WAAW,EAAE;IAC5CC,OAAO,CAACc,OAAO,CAAC,CAACC,GAAG,EAAEC,KAAK,EAAEC,IAAI,KAAI;MACnCA,IAAI,CAACD,KAAK,CAAC,CAACK,SAAS,GAAG,CAACN,GAAG,CAACM,SAAS;IACxC,CAAC,CAAC;EACJ;;AA5DWxB,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;SAAbA,aAAa;EAAAyB,SAAbzB,aAAa;EAAA0B,YAFZ;AAAM","names":["TarefaService","constructor","listarTodos","tarefas","localStorage","JSON","parse","cadastrar","tarefa","id","Date","getTime","push","stringify","buscarPorId","find","atualizar","forEach","obj","index","objs","remover","filter","alterarStatus","concluida","factory","providedIn"],"sourceRoot":"","sources":["C:\\projetos-angular\\gerenciador-tarefas\\gerenciador-tarefas\\src\\app\\tarefas\\shared\\tarefa.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Tarefa } from './tarefa.model';\n\n/** Serviço responsável pela regra de negócio do gerenciamento de tarefas\n *  Listagem, Cadastro, Atualização e Remoção. \n * \n * @author Evelin Ferraz\n * @since 20/12/2022\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TarefaService {\n\n  constructor() { }\n\n  /** Lista todas as tarefas cadastradas \n   * @return Tarefa\n   */\n  listarTodos(): Tarefa[]{\n    const tarefas = localStorage['tarefas'];\n    return tarefas ? JSON.parse(tarefas) : [];\n  }\n\n  /** Cadastra uma nova tarefa\n   * @param Tarefa\n   */\n  cadastrar(tarefa: Tarefa): void {\n    const tarefas = this.listarTodos();\n    tarefa.id = new Date().getTime();\n    tarefas.push(tarefa);\n    localStorage['tarefas'] = JSON.stringify(tarefas);\n  }\n\n  /** Faz uma busca de tarefa por id\n   * @return Tarefa\n   */\n  buscarPorId(id: number): Tarefa {\n    const tarefas: Tarefa[] = this.listarTodos();\n    return tarefas.find(tarefa => tarefa.id === id);\n  }\n\n  /** Atualiza uma determinada tarefa\n   * @param Tarefa\n   */\n  atualizar(tarefa: Tarefa): void {\n    const tarefas: Tarefa[] = this.listarTodos();\n    tarefas.forEach((obj, index, objs) => {\n      if (tarefa.id === obj.id) {\n        objs[index] = tarefa;\n      }\n    }); \n    localStorage['tarefas'] = JSON.stringify(tarefas);\n  }\n\n  /** Remove uma tarefa através do id\n   * @param id\n   */\n  remover(id: number): void {\n    let tarefas: Tarefa[] = this.listarTodos();\n    tarefas = tarefas.filter(tarefa => tarefa.id !== id);\n    localStorage['tarefas'] = JSON.stringify(tarefas);\n  }\n\n  /** Altera o status de determinada tarefa para concluido ou não\n   * @param id \n   */\n  alterarStatus(id: number): void {\n    const tarefas: Tarefa[] = this.listarTodos();\n    tarefas.forEach((obj, index, objs) => {\n      objs[index].concluida = !obj.concluida;\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}